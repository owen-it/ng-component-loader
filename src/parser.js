var parse5 = require('parse5')
var cache = require('lru-cache')(100)
var SourceMapGenerator = require('source-map').SourceMapGenerator
var hash = require('hash-sum')
var deIndent = require('de-indent')
var splitRE = /\r?\n/g
var emptyRE = /^\s*$/
var commentsSymbols = {
    'iced': '#',
    'iced-jsx': '#',
    'iced-redux': '#',
    'coffee': '#',
    'coffee-jsx': '#',
    'coffee-redux': '#',
    'purs': '--',
    'ulmus': '--'
}

module.exports = function(content, filename, needMap)
{
    var cacheKey = hash(filename + content);
    
    var filenameWithHash = filename + '?' + cacheKey;
    
    var output = cache.get(cacheKey);
    
    if (output) return output;
    
    output = {
        template: [],
        style: [],
        script: [],
        styleImports: []
    }
    
    var fragment = parse5.parseFragment(content, {
         locationInfo: true
    })
    
    fragment.childNodes.forEach(function(node){
        
        var type = node.tagName;
        var lang = getAttribute(node, 'lang')
        var src = getAttribute(node, 'src')
        var scoped = getAttribute(node, 'scoped') != null
        var module = getAttribute(node, 'module')
        var warnings = null, map = null

        if(! (type in output) ) return;
        
        if( (type in ['script', 'template']) && output[type].length > 0 ){
            throw new Error([
                '[ng-template-loader] Only one <script> or <template> tag is ',
                'allowed inside a Angular component.'
            ].join(''))
        }
        
        if(src){
            
            switch (type){
                case 'style':
                    output.styleImports.push({
                        src, lang, scoped, module
                    })
                    break
                case 'template':
                    output.template.push({
                        src, lang
                    })
                    break
                case 'script':
                    output.script.push({
                        src, lang
                    })
            }
            
            return
        }
         
        if( type !== 'template' && (!node.childNodes || !node.childNodes.length) ) return
        
        if( type == 'template' ) node = node.content
        
        var start = node.childNodes[0].__location.startOffset
        var end = node.childNodes[node.childNodes.length - 1].__location.endOffset
        var result
        
        if( type === 'script' ){

            result = [
                commentScript(content.slice(0, start), lang),
                deIndent(content.slice(start, end)),
                commentScript(content.slice(end), lang)
            ].join('')

        } else {
            var lineOffset = content.slice(0, start).split(splitRE).length - 1
            result = deIndent(content.slice(start, end));
            result = Array(lineOffset + 1).join('\n') + result
        }
        
        if(needMap){
            map = new SourceMapGenerator()
            map.setSourceContent(filenameWithHash, content)
            
            result.split(splitRE).forEach(function(line, index){
                if(! emptyRE.test(line) && !isCommentLine(line, type, lang)){
                    map.addMapping({
                        source: filenameWithHash,
                        original: {
                            line: index + 1,
                            column: 0
                        },
                        generated: {
                            line: index + 1,
                            column: 0
                        }
                    })
                }
            })
            
            if(type === 'script' && !lang) {
                result += '\n /* generated by ng-template-loader */'
            }
        }
        
        output[type].push({
            lang: lang,
            scoped: scoped,
            module: module,
            content: result,
            map: map && map.toJSON(),
            warnings: []
        })
    })
    
    cache.set(cacheKey, output)

    return output
}

function isCommentLine  (line, type, lang) {
    return type === 'script' && line.indexOf(getCommentSymbol(lang)) === 0
}

function commentScript(content, lang){
    var symbol = getCommentSymbol(lang)
    var lines = content.split(splitRE)
    
    return lines.map(function (line, index) {

        if(index === lines.length - 1 && emptyRE.test(line)){
            return ''
        } else {
            return symbol + (emptyRE.test(line) ? '' : ' ' + line)
        }
        
    }).join('\n')
    
}

function getCommentSymbol(lang){
    return commentsSymbols[lang] || '//'
}

function getAttribute(node, name){
    if(node.attrs){
        var i = node.attrs.length, attr
        
        while (i--) {
            attr = node.attrs[i]
            if(attr.name == name){
                return attr.value;
            }
        }
    }
}
